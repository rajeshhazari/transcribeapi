import groovy.json.JsonSlurper;

def readAppInfoFromJson() {
    def workspacePath = pwd()
    def slurper = new JsonSlurper()
    def json = slurper.parseText(new File("${WORKSPACE}/response.json").text)
    def status = json.status
    return status
}

pipeline {
    agent any
    tools {
        maven 'maven3'
    }
    environment{
        def JAVA_OPTS='-Dspring.profiles.active=dev -Dlogging.level.org.springframework=DEBUG   -agentlib:jdwp=transport=dt_socket,server=y,suspend=n '
        def idstring = UUID.randomUUID().toString();
        id = "tmp-${UUID.randomUUID()}"



    }
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'branch1', description: 'Branch Name')
        string(name: 'environment', defaultValue: 'dev', description: 'Environment profile for sping app')
        booleanParam(name: 'DEPLOY',  description: 'Please select to deploy.')
        choice(name: 'DEPLOY_TO_ENV', choices: ['dev', 'qa', 'prod'], description: 'select and environement for deploying.')
    }

    stages {
        stage ('prepare environment'){
            steps{
                script {
                    last_started = env.STAGE_NAME
                    cleanWs()
                    println("idString:: " + idstring + " id:: " + id)
                    sh '''
                
                           #mkdir -pv /opt/apps/  /opt/test/
                           ls -lrth /opt/apps/  /opt/
                            echo "PATH = ${PATH}"
                            echo "M2_HOME = ${M2_HOME}"
                            
                            #mvn install:install-file -Dfile=/home/devuser/.m2/repository/edu/cmu/sphinx/sphinx4-core/5prealpha-SNAPSHOT/sphinx4-core-5prealpha-SNAPSHOT.jar -DartifactId=sphinx4-core -DgroupId=edu.cmu.sphinx -Dversion=5prealpha-SNAPSHOT -Dpackaging=jar
                            #mvn install:install-file -Dfile=/home/devuser/.m2/repository/edu/cmu/sphinx/sphinx4-data/5prealpha-SNAPSHOT/sphinx4-data-5prealpha-SNAPSHOT.jar -DartifactId=sphinx4-data -DgroupId=edu.cmu.sphinx -Dversion=5prealpha-SNAPSHOT -Dpackaging=jar
                            version=$(mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout --batch-mode -U -e -Dsurefire.useFile=false) 
                            artifactId=$(mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.artifactId -q -DforceStdout --batch-mode -U -e -Dsurefire.useFile=false)
                            
                           '''
                }
            }
        }
        stage('Checkout') {
            steps{
                println('Branch name::'+params.BRANCH_NAME)
                //checkout scm
                checkout([$class: 'GitSCM', branches: [[name: '${BRANCH_NAME}'], [name: '*/branch1']], doGenerateSubmoduleConfigurations: false,
                          extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'RH-Transcribe-app-github-creds', url: 'https://github.com/rajeshhazari/transcribeapi.git']]])
                sh ' chmod +x ${WORKSPACE}/CI-CD/scripts/*.sh  '
            }
        }
        stage('Build') {
            steps {
                script {
                    last_started = env.STAGE_NAME


                    sh '''
                        id -a 
                        
                        echo "Running ${BUILD_ID} on ${JENKINS_URL}"
                        version=$(mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout --batch-mode -U -e -Dsurefire.useFile=false) 
                        artifactId=$(mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.artifactId -q -DforceStdout --batch-mode -U -e -Dsurefire.useFile=false)
                        groupId=$(mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.groupId -q -DforceStdout --batch-mode -U -e -Dsurefire.useFile=false)
                        
                        echo $version  $groupId $artifactId
                        
                        mvn  -U -DskipTests clean package 
                        ls -lrth 
                        pwd 
                        mkdir -p ${WORKSPACE}/transcribe-api/target/dependency && (cd ${WORKSPACE}/transcribe-api/target/dependency; jar -xf ../*.jar)
                        cp ${WORKSPACE}/CI-CD/Dockerfile ${WORKSPACE}/transcribe-api/target/dependency/
                        cd ${WORKSPACE}/transcribe-api/target/dependency/
                        imageId=$(docker build  -q -t transcribeapp/$artifactId:$version --build-arg DEPENDENCY=target/dependency  --build-arg ARTIFACT_NAME=$artifactId-$version.jar --build-arg BUILD_WORKSPACE="${WORKSPACE}" --build-arg MAIN_CLASS="com.rajesh.transcribe.transribeapi.TranscribeapiApplication" . )
                        echo $imageId
                        docker images   
                           
                        '''
                }
            }
        }
        stage('Unit-test') {
            steps {
                script {
                    last_started = env.STAGE_NAME
                    echo 'Testing..'
                    //sh 'mvn -B test package'
                }
            }
        }
        stage('Deploy-to-qa') {
            when {
                allOf {
                    environment ignoreCase: true, name: 'DEPLOY_TO_ENV', value: 'qa'
                    environment  name: 'DEPLOY', value: 'true'
                }

            }
            steps {
                script{
                    last_started = env.STAGE_NAME
                    println("Deploying to "+environment)
                    //TODO ssh to prod server
                    JAVA_OPTS='-Dspring.profiles.active=qa -Dlogging.level.org.springframework=WARN   -agentlib:jdwp=transport=dt_socket,server=y,suspend=n '
                    sh '  docker run -d --restart -t -p 8585:8585 transcribeapp/${artifactId}:${version}  -e  ARTIFACT_NAME=$artifactId-$version.jar  -e  MAIN_CLASS="com.rajesh.transcribe.transribeapi.TranscribeapiApplication"  --label production_status=qa-testing --label env=qa -e JAVA_OPTS $JAVA_OPTS '

                }
            }
        }
        stage('Deploy-devappserver'){
            when{
                allOf {
                    environment ignoreCase: true, name: 'DEPLOY_TO_ENV', value: 'dev'
                    environment name: 'DEPLOY', value: 'true'
                    //currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps{
                script{
                    last_started = env.STAGE_NAME
                    def workspacePath=pwd();
                    JAVA_OPTS='-Dspring.profiles.active=dev -Dlogging.level.org.springframework=DEBUG   -agentlib:jdwp=transport=dt_socket,server=y,suspend=n '
                    println("workspace path :: "+workspacePath +" workspace:: +${WORKSPACE}");
                    sh ' # ./CI-CD/scripts/start.sh'
                    sh '  docker run -d --restart -t -p 8585:8585 transcribeapp/${artifactId}:${version} --label production_status=development --label env=dev -e JAVA_OPTS $JAVA_OPTS  -e  ARTIFACT_NAME=$artifactId-$version.jar  -e  MAIN_CLASS="com.rajesh.transcribe.transribeapi.TranscribeapiApplication"  '
                    readAppInfoFromJson();

                }

            }
        }
        stage('Deploy-prod') {
            when {
                allOf {
                    environment ignoreCase: true, name: 'DEPLOY_TO_ENV', value: 'prod'
                    environment name: 'DEPLOY', value: 'true'
                    //currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }

            }
            steps {
                script{
                    last_started = env.STAGE_NAME
                    println("Deploying to "+environment)
                    //TODO ssh to prod server
                    JAVA_OPTS='-Dspring.profiles.active=prod -Dlogging.level.org.springframework=WARN   -agentlib:jdwp=transport=dt_socket,server=y,suspend=n '
                    sh '  docker run -d --restart -t -p 8585:8585 transcribeapp/${artifactId}:${version}  --label production_status=beta-testing --label env=prod -e JAVA_OPTS=$JAVA_OPTS  -e  ARTIFACT_NAME=$artifactId-$version.jar  -e  MAIN_CLASS="com.rajesh.transcribe.transribeapi.TranscribeapiApplication"  '

                }
            }
        }


    }
    post {
        always {
            println("Do something line sanity tests like acuatator healtcheck")
        }
        failure {
            //mail to: transcribeappuser@yahoo.com, subject: 'The Pipeline failed '
            println(" build failed ${last_started}")
        }
    }

}
