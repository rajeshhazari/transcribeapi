import groovy.json.JsonSlurper;

def readAppInfoFromJson() {
    def workspacePath = pwd()
    def slurper = new JsonSlurper()
    def json = slurper.parseText(new File("${WORKSPACE}/response.json").text)
    def status = json.status
    return status
}

pipeline {
    agent any
    tools {
        maven 'maven3'
    }
    environment{
        def JAVA_OPTS='-Dspring.profiles.active=dev -Dlogging.level.org.springframework=DEBUG   -agentlib:jdwp=transport=dt_socket,server=y,suspend=n '
        def idstring = UUID.randomUUID().toString();
        id = "tmp-${UUID.randomUUID()}"



    }
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'branch1', description: 'Branch Name')
        string(name: 'environment', defaultValue: 'dev', description: 'Environment profile for sping app')
        choice(name: 'DEPLOY_TO', choices: ['dev', 'qa', 'prod'], description: 'select and environement for deploying.')
    }

    stages {
        stage ('prepare environment'){
            steps{
                script {
                    last_started = env.STAGE_NAME
                    println("idString:: " + idstring + " id:: " + id)
                    sh '''
                
                           #mkdir -pv /opt/apps/  /opt/test/
                           ls -lrth /opt/apps/  /opt/
                            echo "PATH = ${PATH}"
                            echo "M2_HOME = ${M2_HOME}"
                            
                            #mvn install:install-file -Dfile=/home/devuser/.m2/repository/edu/cmu/sphinx/sphinx4-core/5prealpha-SNAPSHOT/sphinx4-core-5prealpha-SNAPSHOT.jar -DartifactId=sphinx4-core -DgroupId=edu.cmu.sphinx -Dversion=5prealpha-SNAPSHOT -Dpackaging=jar
                            #mvn install:install-file -Dfile=/home/devuser/.m2/repository/edu/cmu/sphinx/sphinx4-data/5prealpha-SNAPSHOT/sphinx4-data-5prealpha-SNAPSHOT.jar -DartifactId=sphinx4-data -DgroupId=edu.cmu.sphinx -Dversion=5prealpha-SNAPSHOT -Dpackaging=jar
                            
                            
                           '''
                }
            }
        }
        stage('Checkout') {
            steps{
                checkout scm ${BRANCH_NAME}
                //git branch: ${BRANCH_NAME}, credentialsId:
                sh " chmod +x ${WORKSPACE}/CI-CD/scripts/*.sh"
            }
        }
        stage('Build') {
            steps {
                script {
                    last_started = env.STAGE_NAME
                    echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
                    sh '''
                        id -a 
                           mvn  -U -DskipTests clean install 
                           mkdir -p target/dependency && (cd target/dependency; jar -xf ../*.jar)
                           docker build -t transribeapp/transcribeapi-${env.APP_NAME}-${env.BUILD_ID} . 
                           #&& docker run -p 8585:8585 transribeapp/transcribeapi-${env.APP_NAME}-${env.BUILD_ID} 
                        '''
                }
            }
        }
        stage('Unit-test') {
            steps {
                script {
                    last_started = env.STAGE_NAME
                    echo 'Testing..'

                    //sh 'mvn -B test package'
                }
            }
        }
        stage('Deploy to prod') {
            when {
                environment name: 'DEPLOY_TO', value: 'production'
            }
            steps {
                script{
                    last_started = env.STAGE_NAME
                    println("Deploying to prod")
                }
            }
        }
        stage('Deploy-devappserver'){
            when{

                environment name: 'DEPLOY_TO', value: 'dev'
                //currentBuild.result == null || currentBuild.result == 'SUCCESS'

            }
            steps{
                script{
                    last_started = env.STAGE_NAME
                    def workspacePath=pwd();
                    println("workspace path :: "+workspacePath +" workspace:: +${WORKSPACE}");
                    sh './CI-CD/scripts/start.sh'
                    readAppInfoFromJson();

                }




            }
        }
        stage('Deploy-prod') {
            when {

                environment name: 'DEPLOY_TO', value: 'production'
                //currentBuild.result == null || currentBuild.result == 'SUCCESS'

            }
            steps {
                script{
                    last_started = env.STAGE_NAME
                    println("Deploying to "+environment)
                }
            }
        }


    }
    post {
        always {
            println("Do something line sanity tests like acuatator healtcheck")
        }
        failure {
            //mail to: transcribeappuser@yahoo.com, subject: 'The Pipeline failed '
            println(" build failed ${last_started}")
        }
    }





}
