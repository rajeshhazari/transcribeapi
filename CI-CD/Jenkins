pipeline {
    agent any
    tools {
        maven 'maven3'
    }
    environment{
        def JAVA_OPTS='-Dspring.profiles.active=dev -Dlogging.level.org.springframework=DEBUG   -agentlib:jdwp=transport=dt_socket,server=y,suspend=n '
        def idstring = UUID.randomUUID().toString();
        id = "tmp-${UUID.randomUUID()}"




    }
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'branch1', description: 'Branch Name')
        string(name: 'environment', defaultValue: 'dev', description: 'Environment profile for sping app')
        choice(name: 'DEPLOY_TO', choices: ['dev', 'qa', 'prod'], description: 'select and environement for deploying.')
    }

    stages {
        stage ('prepare environment'){
            steps{
                println("idString:: "+idstring +" id:: "+id)
                sh '''
                
                   #mkdir -pv /opt/apps/  /opt/test/
                   ls -lrth /opt/apps/  /opt/
                  echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                   '''
            }
        }
        stage('Checkout') {
            steps{
                checkout scm
                sh 'ls -lrth .'
            }
        }
        stage('Build') {
            steps {
                echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
                sh '''
                id -a 
                   mvn -DskipTests clean package 
                    ls -lrth
                    printenv
                '''

            }
        }
        stage('Unit-test') {
            steps {
                echo 'Testing..'
                sh 'mvn -B test package'
            }
        }
        stage('Deploy') {
            when {
                environment name: 'DEPLOY_TO', value: 'production'
            }
            steps {
                echo 'Deploying'
            }
        }
        stage('Deploy-devappserver'){
            when{

                environment name: 'DEPLOY_TO', value: 'dev'
                //currentBuild.result == null || currentBuild.result == 'SUCCESS'

            }
            steps{
                sh '''
                pwd
                ls -lrth 
                cp target/*.jar app.jar
                mv app.jar /opt/apps/
                java -jar -D${JAVA_OPTS} /opt/apps/app.jar 
                '''
            }
        }
        stage('Deploy-prod') {
            when {

                environment name: 'DEPLOY_TO', value: 'production'
                //currentBuild.result == null || currentBuild.result == 'SUCCESS'

            }
            steps {
                println("Deploying to "+environment)
            }
        }
    }
    post {
        always {
            println("Do something line sanity tests like acuatator healtcheck")
        }
        failure {
            //mail to: transcribeappuser@yahoo.com, subject: 'The Pipeline failed '
            println(" file failed ")
        }
    }
}
